#Autor: Donekulda
#Ingredients - Artifacts effects

get_mana_blood_detailed_description_effect = {
	$ORIGIN$ = { save_scope_as = origin }
	
	#If the character from whom the blood is extracted has bloodline, 
	#then this bloodline is also added into the extracted blood if its permitted
	if = { 
		limit = {
			$ALLOW_BLOODLINE$ = yes
		}
		scope:origin = {
			switch = {
			  trigger = has_trait
			  dragonic_bloodline = { save_scope_value_as = { name = bloodline_scope value = flag:dragonic_bloodline } }
			  antler_bloodline = { save_scope_value_as = { name = bloodline_scope value = flag:antler_bloodline } }
			  giant_bloodline = { save_scope_value_as = { name = bloodline_scope value = flag:giant_bloodline } }
			  fallback = { save_scope_value_as = { name = bloodline_scope value = flag:none } }
			}
		}
	}
		
	#Add mana affinity to extracted blood
	save_scope_value_as = {
		name = blood_mana_affinity
		value = { 
			value = 0
			add = scope:origin.var:base_mana_affinity
			
			#will boost the mana affinity of the blood
			add = { value = scope:origin.mana_affinity_bloodline_boost }
		}
		
	}
	
	save_scope_value_as = {
		name = quality
		value = {
			if = {
				limit = {
					scope:blood_mana_affinity <= mundane_mana_affinity_level
				}
				add = 15
				
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > mundane_mana_affinity_level
						scope:blood_mana_affinity <= sub_magical_mana_affinity_level
					}
				}
				add = 50
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > sub_magical_mana_affinity_level
						scope:blood_mana_affinity <= magical_mana_affinity_level
					}
				}
				add = 75
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > magical_mana_affinity_level
						scope:blood_mana_affinity <= transcendent_affinity_level
					}
				}
				add = 100
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > transcendent_affinity_level
						scope:blood_mana_affinity <= demigod_mana_affinity_level
					}
				}
				add = 150
			}
			else = {
				add = 200
			}
		}
	}
}

give_artifact_an_enchantment_effect = {
	$ENCHANTER$ = { save_scope_as = enchanter }
	random_list = {
		200 = { #1 level
			add_artifact_modifier = artifact_enchantment_$ENCHANTMENT$_1_modifier
		}
		75 = { #2 level
			modifier = {
				add = {
					value = 5
					multiply = {
						value = var:mana_drops_used
						divide = var:enchantment_difficulity
					}
				}
			}
			modifier = {
				add = {
					value = 2
					multiply = scope:enchanter.mage_level
				}
			}
			modifier = {
				add = {
					value = 10
					multiply = laboratory_iron_tools_level
					divide = var:enchantment_difficulity
				}
			}
			modifier = {
				add = {
					value = 10
					multiply = { 
						value = laboratory_spellcircles_level
						add = 1
						divide = var:enchantment_difficulity
					}
				}
			}
			add_artifact_modifier = artifact_enchantment_$ENCHANTMENT$_2_modifier
		}
		25 = { #3 level
			modifier = {
				add = {
					value = 8
					multiply = {
						value = var:mana_drops_used
						divide = var:enchantment_difficulity
					}
				}
			}
			modifier = {
				add = {
					value = 4
					multiply = scope:enchanter.mage_level
				}
			}
			modifier = {
				add = {
					value = 15
					multiply = laboratory_iron_tools_level
					divide = var:enchantment_difficulity
				}
			}
			modifier = {
				add = {
					value = 15
					multiply = { 
						value = laboratory_spellcircles_level
						add = 1
						divide = var:enchantment_difficulity
					}
				}
			}
			add_artifact_modifier = artifact_enchantment_$ENCHANTMENT$_3_modifier
		}
		5 = { #4 level
			modifier = {
				add = {
					value = 13
					multiply = {
						value = var:mana_drops_used
						divide = var:enchantment_difficulity
					}
				}
			}
			modifier = {
				add = {
					value = 6
					multiply = scope:enchanter.mage_level
				}
			}
			modifier = {
				add = {
					value = 20
					multiply = laboratory_iron_tools_level
					divide = var:enchantment_difficulity
				}
			}
			modifier = {
				add = {
					value = 20
					multiply = { 
						value = laboratory_spellcircles_level
						add = 1
						divide = var:enchantment_difficulity
					}
				}
			}
			add_artifact_modifier = artifact_enchantment_$ENCHANTMENT$_4_modifier
		}
	}
}

pay_mana_drop_cost_effect = {
	$OWNER$ = { save_scope_as = owner }
	save_scope_value_as = {
		name = mana_drop_cost
		value = $COST$
	}
	
	scope:owner = {
		set_local_variable = {
			name = mana_drop_cost_local
			value = scope:mana_drop_cost
		}
		
		if = {
			limit = {
				any_ingredient_in_inventory = {
					count >= scope:mana_drop_cost
					has_artifact_feature_group = compressed_mana
					has_artifact_feature = mana_drop
				}
			}
			while = {
				limit = {
					local_var:mana_drop_cost_local > 0
				}
				random_ingredient_in_inventory = {
					limit = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_drop
					}
					artifact_owner = {destroy_artifact = prev}
				}
				change_local_variable = { name = mana_drop_cost_local subtract = 1 }
			}
		}
		else_if = {
			limit = {
				scope:mana_drop_cost <= mana_drops_in_inventory
			}
			set_local_variable = {
				name = mana_vial_cost_local
				value = 0
			}
			
			while = {
				limit = {
					local_var:mana_drop_cost_local >= mana_drops_needed_for_vial
				}
				change_local_variable = { name = mana_drop_cost_local subtract = mana_drops_needed_for_vial }
				change_local_variable = { name = mana_vial_cost_local add = 1 }
			}
			
			while = { #destroy every mana drop in inventory
				limit = {
					any_ingredient_in_inventory = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_drop
					}
					local_var:mana_drop_cost_local > 0
				}
				random_ingredient_in_inventory = {
					limit = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_drop
					}
					artifact_owner = {destroy_artifact = prev}
				}
				change_local_variable = { name = mana_drop_cost_local subtract = 1 }
			}
			
			#if there wasnt enough mana drops 
			set_local_variable = {
				name = mana_drops_to_generate
				value = {
					value = mana_drops_needed_for_vial
					subtract = local_var:mana_drop_cost_local
				}
			}
			if = {
				limit = {
					any_ingredient_in_inventory = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_vial
					}
				}
				random_ingredient_in_inventory = {
					limit = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_vial
					}
					artifact_owner = {destroy_artifact = prev}
				}
				while = { 
					limit = {
						local_var:mana_drops_to_generate > 0
					}
					create_ingredient_compressed_mana = { OWNER = scope:owner }
					change_local_variable = { name = mana_drops_to_generate subtract = 1 }
				}
			}
			
			while = {
				limit = {
					any_ingredient_in_inventory = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_vial
					}
					local_var:mana_vial_cost_local > 0
				}
				random_ingredient_in_inventory = {
					limit = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_vial
					}
					artifact_owner = {destroy_artifact = prev}
				}
				change_local_variable = { name = mana_vial_cost_local subtract = 1 }
			}
		}
	}
}

create_ingredient_mana_blood_effect = {
	$OWNER$ = { save_scope_as = owner }
	$ORIGIN$ = { save_scope_as = origin }
	save_scope_value_as = {
		name = allow_bloodline
		value = $ALLOW_BLOODLINE$
	}
	
	get_mana_blood_detailed_description_effect = { ORIGIN = $ORIGIN$ ALLOW_BLOODLINE = $ALLOW_BLOODLINE$ }
	
	hidden_effect_new_artifact = {
		scope:owner = {
			if = {
				limit = { exists = scope:bloodline }
				create_artifact = {
					name = placeholder
					creator = scope:origin
					description = placeholder
					template = mana_blood_template
					modifier = artifact_placeholder_modifier
					visuals = mana_blood
					type = ingredient
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = $DECAY$
				}
			}
			else  = {
				create_artifact = {
					name = placeholder
					creator = scope:origin
					description = placeholder
					template = mana_blood_template
					visuals = mana_blood
					type = ingredient
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = $DECAY$
				}
			} 
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = mana_blood_ingredient_name
			
			set_variable = {  #Give the blood its mana affinity
				name = mana_affinity
				value = scope:blood_mana_affinity
			}
			
			if = { #Add to extracted blood, its bloodline 
				limit = {
					exists = scope:bloodline_scope
				}
				set_variable = {
					name = bloodline
					value = scope:bloodline_scope
				}
			}
			else = {
				set_variable = {
					name = bloodline
					value = flag:none
				}
			}
			set_artifact_description = mana_blood_ingredient_desc
			
			if = { #Based on mana affinity rank give according modifier
				limit = {
					AND = {
						scope:blood_mana_affinity > mundane_mana_affinity_level
						scope:blood_mana_affinity <= sub_magical_mana_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_sub_magical_rank_affinity_modifier
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > sub_magical_mana_affinity_level
						scope:blood_mana_affinity <= magical_mana_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_magical_rank_affinity_modifier
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > magical_mana_affinity_level
						scope:blood_mana_affinity <= transcendent_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_loved_rank_affinity_modifier
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > transcendent_affinity_level
						scope:blood_mana_affinity <= demigod_mana_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_demigod_rank_affinity_modifier
			}
			else_if = {
				limit = {
					scope:blood_mana_affinity > demigod_mana_affinity_level
				}
				add_artifact_modifier = ingredient_mana_blood_god_rank_affinity_modifier
			}
			
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_artifact_feature_group = mana_blood
		}
	}
}

create_ingredient_compressed_mana = {
	$OWNER$ = { save_scope_as = owner }
	
	if = {
		limit = {
			scope:owner = {
				any_ingredient_in_inventory = {
					limit = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_drop
					}
					count >= mana_drops_needed_for_vial.dec
				}
			}
		}
		
		save_temporary_scope_value_as = {
			name = mana_vial
			value = set
		}
		
		set_local_variable = {
			name = number_of_drops
			value = mana_drops_needed_for_vial.dec
		}
		
		while = { #destroy the rest of mana drops
			limit = {
				local_var:number_of_drops > 0
			}
			scope:owner = {
				random_ingredient_in_inventory = {
					limit = {
						has_artifact_feature_group = compressed_mana
						has_artifact_feature = mana_drop
					}
					artifact_owner = {destroy_artifact = prev}
				}
			}
			change_local_variable = {
				name = number_of_drops
				subtract = 1
			}
		}
	}
	else = {
		save_temporary_scope_value_as = {
			name = mana_vial
			value = unset
		}
	}
	
	save_scope_value_as = {
		name = quality
		value = {
			value = 50
			if = {
				limit = { scope:mana_vial = set }
				add = 150
			}
		}
	}
	
	
	hidden_effect_new_artifact = {
		scope:owner = {
			if = {
				limit = { scope:mana_vial = set }
				
				create_artifact = {
					name = placeholder
					creator = scope:owner
					description = placeholder
					template = mana_blood_template
					modifier = artifact_placeholder_modifier
					visuals = mana_vial
					type = ingredient
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = no #ores dont decay
				}
			}
			else = {
				create_artifact = {
					name = placeholder
					creator = scope:owner
					description = placeholder
					template = mana_blood_template
					modifier = artifact_placeholder_modifier
					visuals = mana_drop
					type = ingredient
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = no #ores dont decay
				}
				
			}
		}
		
		scope:newly_created_artifact = {
			if = {
				limit = {scope:mana_vial = set}
				set_artifact_name = mana_vial_ingredient_name
				set_artifact_description = mana_vial_ingredient_desc
				set_variable = {
					name = compressed_mana_type
					value = flag:mana_vial
				}
			}
			else = {
				set_artifact_name = mana_drop_ingredient_name
				set_artifact_description = mana_drop_ingredient_desc
				set_variable = {
					name = compressed_mana_type
					value = flag:mana_drop
				}
			}
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_artifact_feature_group = compressed_mana
		}
	}
}

create_ingredient_ore = {
	$OWNER$ = { save_scope_as = owner }
	
	set_local_variable = {
		name = ore_quality 
		value = 0
	}
			
	switch = {
		trigger = $TYPE$
		mythril = { change_local_variable = { name = ore_quality add = 100 } }
		fallback = { change_local_variable = { name = ore_quality add = 15 } }
	}
	
	save_scope_value_as = {
		name = quality
		value = local_var:ore_quality
	}
	
	hidden_effect_new_artifact = {
		scope:owner = {
			create_artifact = {
				name = placeholder
				creator = scope:owner
				description = placeholder
				template = mana_blood_template
				modifier = artifact_placeholder_modifier
				visuals = $TYPE$_ore
				type = ingredient
				save_scope_as = newly_created_artifact
				quality = scope:quality
				wealth = scope:quality
				decaying = no #ores dont decay
			}
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = $TYPE$_ore_ingredient_name
			
			set_artifact_description = $TYPE$_ore_ingredient_desc
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_variable = {
				name = ore_type
				value = flag:$TYPE$
			}
			
			set_artifact_feature_group = ores
		}
	}
}

create_ingredient_metal = {
	$OWNER$ = { save_scope_as = owner }
	
	set_local_variable = {
		name = metal_quality 
		value = 0
	}
			
	switch = {
		trigger = $TYPE$
		carbon_steel = { change_local_variable = { name = metal_quality add = 50 } }
		fallback = { change_local_variable = { name = metal_quality add = 15 } }
	}
	
	save_scope_value_as = {
		name = quality
		value = local_var:metal_quality
	}
	
	hidden_effect_new_artifact = {
		scope:owner = {
			create_artifact = {
				name = placeholder
				creator = scope:owner
				description = placeholder
				template = mana_blood_template
				modifier = artifact_placeholder_modifier
				visuals = $TYPE$_metal
				type = ingredient
				save_scope_as = newly_created_artifact
				quality = scope:quality
				wealth = scope:quality
				decaying = no #metals dont decay
			}
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = $TYPE$_metal_ingredient_name
			
			set_artifact_description = $TYPE$_metal_ingredient_desc
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_variable = {
				name = metal_type
				value = flag:$TYPE$
			}
			
			set_artifact_feature_group = special_metals
		}
	}
}

create_ingredient_wood = {
	$OWNER$ = { save_scope_as = owner }
	
	set_local_variable = {
		name = wood_quality 
		value = 0
	}
			
	switch = {
		trigger = $TYPE$
		magical_oak = { change_local_variable = { name = wood_quality add = 25 } }
		fallback = { change_local_variable = { name = wood_quality add = 15 } }
	}
	
	save_scope_value_as = {
		name = quality
		value = local_var:wood_quality
	}
	
	hidden_effect_new_artifact = {
		scope:owner = {
			create_artifact = {
				name = placeholder
				creator = scope:owner
				description = placeholder
				template = mana_blood_template
				modifier = artifact_placeholder_modifier
				visuals = $TYPE$_wood
				type = ingredient
				save_scope_as = newly_created_artifact
				quality = scope:quality
				wealth = scope:quality
				decaying = yes
			}
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = $TYPE$_wood_ingredient_name
			
			set_artifact_description = $TYPE$_wood_ingredient_desc
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_variable = {
				name = wood_type
				value = flag:$TYPE$
			}
			
			set_artifact_feature_group = wood
		}
	}
}

create_ingredient_herb = {
	$OWNER$ = { save_scope_as = owner }
	
	save_scope_value_as = {
		name = quality
		value = {
			value = 0
			
			switch = {
				trigger = $TYPE$
				moonshade = { add = 25 }
				bloodbane = { add = 25 }
				aqualum = { add = 25 }
				fallback = { add = 15 }
			}
		}
	}
	
	hidden_effect_new_artifact = {
		scope:owner = {
			create_artifact = {
				name = placeholder
				creator = scope:owner
				description = placeholder
				template = mana_blood_template
				modifier = artifact_placeholder_modifier
				visuals = $TYPE$_herb
				type = ingredient
				save_scope_as = newly_created_artifact
				quality = scope:quality
				wealth = scope:quality
				decaying = yes
			}
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = $TYPE$_herb_ingredient_name
			
			set_artifact_description = $TYPE$_herb_ingredient_desc
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_variable = {
				name = herb_type
				value = flag:$TYPE$
			}
			
			set_artifact_feature_group = herbs
		}
	}
}

generate_random_trinket = {
	$OWNER$ = { save_scope_as = owner }
	
	hidden_effect_new_artifact = {
		scope:owner = {
			random_list = {
				1 = { #ring
					create_artifact = {
						name = artifact_ring_name
						description = placeholder
						type = miscellaneous
						visuals = ring
						modifier = artifact_placeholder_modifier
						save_scope_as = newly_created_artifact
						quality = $QUALITY$
						wealth = $QUALITY$
						history = {
							type = discovered
							actor = scope:owner
							recipient = scope:owner
							location = scope:owner.location
						}
					}
					scope:newly_created_artifact = {
						get_artifact_feature_references_effect = yes
						set_artifact_description = artifact_ring_description
					}
					
				}
				1 = { #Brooch
					create_artifact = {
						name = artifact_brooch_name
						description = placeholder
						type = miscellaneous
						visuals = brooch
						modifier = artifact_placeholder_modifier
						save_scope_as = newly_created_artifact
						quality = $QUALITY$
						wealth = $QUALITY$
						history = {
							type = discovered
							actor = scope:owner
							recipient = scope:owner
							location = scope:owner.location
						}
					}
					scope:newly_created_artifact = {
						if = {
							limit = {
								OR = {
									has_artifact_feature = brooch_decoration_adornment
									has_artifact_feature = brooch_decoration_centerpiece_and_adornment
								}
							}
							set_artifact_feature_group = brooch_adornment
						}
						if = {
							limit = {
								OR = {
									has_artifact_feature = brooch_decoration_centerpiece
									has_artifact_feature = brooch_decoration_centerpiece_and_adornment
								}
							}
							set_artifact_feature_group = brooch_centerpiece
						}
						
						get_artifact_feature_references_effect = yes
						set_artifact_description = artifact_brooch_description
					}
				}
			}
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = $TYPE$_herb_ingredient_name
			
			set_artifact_description = $TYPE$_herb_ingredient_desc
				
			random_list = {
				1 = { add_artifact_modifier = artifact_monthly_prestige_penalty_modifier }
				1 = { add_artifact_modifier = artifact_child_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_knight_effectiveness_1_modifier }
				1 = { add_artifact_modifier = artifact_knight_effectiveness_2_modifier }
				1 = { add_artifact_modifier = artifact_knight_effectiveness_3_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_2_modifier }
				1 = { add_artifact_modifier = artifact_short_reign_duration_mult_1_modifier }
				1 = { add_artifact_modifier = artifact_short_reign_duration_mult_2_modifier }
				1 = { add_artifact_modifier = artifact_dynasty_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_dynasty_opinion_2_modifier }
				1 = { add_artifact_modifier = artifact_short_reign_duration_mult_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_add_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_add_2_modifier }
				1 = { add_artifact_modifier = artifact_attraction_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_piety_1_modifier }
				1 = { add_artifact_modifier = artifact_different_faith_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_different_faith_opinion_2_modifier }
				2 = {}
			}
			random_list = {
				200 = {} # To lower the probability of second modifier
				1 = { add_artifact_modifier = artifact_monthly_prestige_penalty_modifier }
				1 = { add_artifact_modifier = artifact_child_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_knight_effectiveness_1_modifier }
				1 = { add_artifact_modifier = artifact_knight_effectiveness_2_modifier }
				1 = { add_artifact_modifier = artifact_knight_effectiveness_3_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_2_modifier }
				1 = { add_artifact_modifier = artifact_short_reign_duration_mult_1_modifier }
				1 = { add_artifact_modifier = artifact_short_reign_duration_mult_2_modifier }
				1 = { add_artifact_modifier = artifact_dynasty_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_dynasty_opinion_2_modifier }
				1 = { add_artifact_modifier = artifact_short_reign_duration_mult_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_add_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_prestige_add_2_modifier }
				1 = { add_artifact_modifier = artifact_attraction_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_monthly_piety_1_modifier }
				1 = { add_artifact_modifier = artifact_different_faith_opinion_1_modifier }
				1 = { add_artifact_modifier = artifact_different_faith_opinion_2_modifier }
			}
			
			remove_artifact_modifier = artifact_placeholder_modifier

			set_variable = {
				name = quality
				value = $QUALITY$
			}
			set_variable = {
				name = wealth
				value = $QUALITY$
			}
			
			save_scope_as = $SCOPE$
		}
	}
}