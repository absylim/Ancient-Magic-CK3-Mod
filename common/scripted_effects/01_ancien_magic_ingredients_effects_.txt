#Autor: Donekulda
#Ingredients - Artifacts effects

get_mana_blood_detailed_description_effect = {
	$ORIGIN$ = { save_scope_as = origin }
	
	#If the character from whom the blood is extracted has bloodline, 
	#then this bloodline is also added into the extracted blood if its permitted
	if = { 
		limit = {
			$ALLOW_BLOODLINE$ = yes
		}
		scope:origin = {
			switch = {
			  trigger = has_trait
			  dragonic_bloodline = { save_scope_value_as = { name = bloodline_scope value = flag:dragonic_bloodline } }
			  antler_bloodline = { save_scope_value_as = { name = bloodline_scope value = flag:antler_bloodline } }
			  giant_bloodline = { save_scope_value_as = { name = bloodline_scope value = flag:giant_bloodline } }
			  fallback = { save_scope_value_as = { name = bloodline_scope value = flag:none } }
			}
		}
	}
		
	#Add mana affinity to extracted blood
	save_scope_value_as = {
		name = blood_mana_affinity
		value = { 
			value = 0
			add = scope:origin.var:base_mana_affinity
			
			#will boost the mana affinity of the blood
			add = { value = scope:origin.mana_affinity_bloodline_boost }
		}
		
	}
	
	save_scope_value_as = {
		name = quality
		value = {
			if = {
				limit = {
					scope:blood_mana_affinity <= mundane_mana_affinity_level
				}
				add = 15
				
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > mundane_mana_affinity_level
						scope:blood_mana_affinity <= sub_magical_mana_affinity_level
					}
				}
				add = 50
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > sub_magical_mana_affinity_level
						scope:blood_mana_affinity <= magical_mana_affinity_level
					}
				}
				add = 75
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > magical_mana_affinity_level
						scope:blood_mana_affinity <= transcendent_affinity_level
					}
				}
				add = 100
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > transcendent_affinity_level
						scope:blood_mana_affinity <= demigod_mana_affinity_level
					}
				}
				add = 150
			}
			else = {
				add = 200
			}
		}
	}
}

create_ingredient_mana_blood_effect = {
	$OWNER$ = { save_scope_as = owner }
	$ORIGIN$ = { save_scope_as = origin }
	save_scope_value_as = {
		name = allow_bloodline
		value = $ALLOW_BLOODLINE$
	}
	
	get_mana_blood_detailed_description_effect = { ORIGIN = $ORIGIN$ ALLOW_BLOODLINE = $ALLOW_BLOODLINE$ }
	
	hidden_effect_new_artifact = {
		scope:owner = {
			if = {
				limit = { exists = scope:bloodline }
				create_artifact = {
					name = placeholder
					creator = scope:origin
					description = placeholder
					template = mana_blood_template
					modifier = artifact_placeholder_modifier
					visuals = mana_blood
					type = ingredient
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = $DECAY$
				}
			}
			else  = {
				create_artifact = {
					name = placeholder
					creator = scope:origin
					description = placeholder
					template = mana_blood_template
					visuals = mana_blood
					type = ingredient
					modifier = artifact_placeholder_modifier
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = $DECAY$
				}
			} 
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = mana_blood_ingredient_name
			
			set_variable = {  #Give the blood its mana affinity
				name = mana_affinity
				value = scope:blood_mana_affinity
			}
			
			if = { #Add to extracted blood, its bloodline 
				limit = {
					exists = scope:bloodline_scope
				}
				set_variable = {
					name = bloodline
					value = scope:bloodline_scope
				}
			}
			else = {
				set_variable = {
					name = bloodline
					value = flag:none
				}
			}
			set_artifact_description = mana_blood_ingredient_desc
			
			if = { #Based on mana affinity rank give according modifier
				limit = {
					AND = {
						scope:blood_mana_affinity > mundane_mana_affinity_level
						scope:blood_mana_affinity <= sub_magical_mana_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_sub_magical_rank_affinity_modifier
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > sub_magical_mana_affinity_level
						scope:blood_mana_affinity <= magical_mana_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_magical_rank_affinity_modifier
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > magical_mana_affinity_level
						scope:blood_mana_affinity <= transcendent_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_loved_rank_affinity_modifier
			}
			else_if = {
				limit = {
					AND = {
						scope:blood_mana_affinity > transcendent_affinity_level
						scope:blood_mana_affinity <= demigod_mana_affinity_level
					}
				}
				add_artifact_modifier = ingredient_mana_blood_demigod_rank_affinity_modifier
			}
			else_if = {
				limit = {
					scope:blood_mana_affinity > demigod_mana_affinity_level
				}
				add_artifact_modifier = ingredient_mana_blood_god_rank_affinity_modifier
			}
			
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_artifact_feature_group = mana_blood
		}
	}
}

create_ingredient_compressed_mana = {
	$OWNER$ = { save_scope_as = owner }
	
	if = {
		limit = {
			any_ingredient_in_inventory = {
				limit = {
					has_artifact_feature_group = compressed_mana
				}
				count >= mana_drops_needed_for_vial.dec
			}
		}
		
		save_temporary_scope_value_as = {
			name = mana_vial
			value = set
		}
		
		set_local_variable = {
			name = number_of_drops
			value = mana_drops_needed_for_vial.dec
		}
		
		while = { #destroy the rest of mana drops
			limit = {
				local_var:number_of_drops.compare_value > 0
			}
			random_ingredient_in_inventory = {
				limit = {
					has_artifact_feature_group = compressed_mana
					has_artifact_feature = mana_drop
				}
				artifact_owner = {destroy_artifact = prev}
			}
			change_local_variable = {
				name = number_of_drops
				subtract = 1
			}
		}
	}
	else = {
		save_temporary_scope_value_as = {
			name = mana_vial
			value = unset
		}
	}
	
	save_scope_value_as = {
		name = quality
		value = {
			value = 50
			if = {
				limit = { scope:mana_vial = set }
				add = 150
			}
		}
	}
	
	
	hidden_effect_new_artifact = {
		scope:owner = {
			if = {
				limit = { scope:mana_vial = set }
				
				create_artifact = {
					name = placeholder
					creator = scope:owner
					description = placeholder
					template = mana_blood_template
					modifier = artifact_placeholder_modifier
					visuals = mana_vial
					type = ingredient
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = no #ores dont decay
				}
			}
			else = {
				create_artifact = {
					name = placeholder
					creator = scope:owner
					description = placeholder
					template = mana_blood_template
					modifier = artifact_placeholder_modifier
					visuals = mana_drop
					type = ingredient
					save_scope_as = newly_created_artifact
					quality = scope:quality
					wealth = scope:quality
					decaying = no #ores dont decay
				}
				
			}
		}
		
		scope:newly_created_artifact = {
			if = {
				limit = {scope:mana_vial = set}
				set_artifact_name = mana_vial_ingredient_name
				set_artifact_description = mana_vial_ingredient_desc
				set_variable = {
					name = compressed_mana_type
					value = flag:mana_vial
				}
			}
			else = {
				set_artifact_name = mana_drop_ingredient_name
				set_artifact_description = mana_drop_ingredient_desc
				set_variable = {
					name = compressed_mana_type
					value = flag:mana_drop
				}
			}
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_artifact_feature_group = compressed_mana
		}
	}
}

create_ingredient_ore = {
	$OWNER$ = { save_scope_as = owner }
	
	save_scope_value_as = {
		name = quality
		value = {
			value = 0
			
			switch = {
				trigger = $TYPE$
				mythril = { add = 100 }
				fallback = { add = 15 }
			}
		}
	}
	
	hidden_effect_new_artifact = {
		scope:owner = {
			create_artifact = {
				name = placeholder
				creator = scope:owner
				description = placeholder
				template = mana_blood_template
				modifier = artifact_placeholder_modifier
				visuals = $TYPE$_ore
				type = ingredient
				save_scope_as = newly_created_artifact
				quality = scope:quality
				wealth = scope:quality
				decaying = no #ores dont decay
			}
		}
		
		scope:newly_created_artifact = {
			set_artifact_name = $TYPE$_ore_ingredient_name
			
			set_artifact_description = $TYPE$_ore_ingredient_desc
				
			remove_artifact_modifier = artifact_placeholder_modifier
			
			set_artifact_feature_group = ores
		}
	}
}