types mana_hud_guis {
	type mana_hud = hbox {
		name = "mana_hud"
		layoutpolicy_vertical = expanding
		minimumsize = { 90 0 }
		margin_left = 7
		margin_right = 5

		hbox = {
			name = "mana"
			layoutpolicy_vertical = expanding

			hbox = {
				spacing = 0
				margin_top = -11
				visible = "[And( Not(IsObserver), GetScriptedGui('perk_select').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('perk',MakeScopeFlag('mage_perk')).End) )]"

				using = tooltip_ne
		
				tooltipwidget = {
					widget_mana_gen_breakdown_tooltip = {}
				}

				icon = {
					name = "mana_icon"
					size = { 30 30 }
					texture = "gfx/interface/icons/icon_active_aura.dds"
				}

				vbox = {
					margin_bottom = 1
					spacing = 1
					ignoreinvisible = yes

					text_single = {
						name = "mana_value"
						text = "[GetPlayer.MakeScope.Var('mana').GetValue|0]"
						max_width = 50
						default_format = "#high"
						using = Font_Size_Medium
					}

					progressbar_standard = {
						name = "mana_bar"
						size = { 40 8 }

						min = 0
						max = "[FixedPointToFloat(GetPlayer.MakeScope.ScriptValue('ancient_magic_max_mana'))]"
						value = "[FixedPointToFloat(GetPlayer.MakeScope.Var('mana').GetValue)]"
					}
				}
			}

			hbox = {
				spacing = 6
				margin_top = -11
				visible = "[Or( IsObserver, Not(GetScriptedGui('perk_select').IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('perk',MakeScopeFlag('mage_perk')).End)) )]"

				icon = {
					name = "inactive_icon"
					size = { 30 30 }
					texture = "gfx/interface/icons/icon_inactive_aura.dds"
				}

				flowcontainer = {
					margin_bottom = 7
					spacing = -6
					direction = vertical
					ignoreinvisible = yes

					text_single = {
						name = "mana_value"
						layoutpolicy_horizontal = expanding
						raw_text = "0"
						max_width = 50
						default_format = "#high"
						using = Font_Size_Medium
					}

					text_single = {
						name = "mana_balance"
						layoutpolicy_horizontal = expanding
						raw_text = "0"
						max_width = 50
						default_format = "#low"
					}
				}
			}
		}
	}

	type widget_mana_gen_breakdown_tooltip = widget {
		size = { 50 50 }
		alwaystransparent = no

		block "background" { #### needed to solve the hack for tooltip in Realm View
			using = DefaultTooltipBackground
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			set_parent_size_to_minimum = yes
			minimumsize = { 280 0 }

			margin = { 15 10 }
			spacing = 20

			hbox = {
				layoutpolicy_horizontal = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "MAXIMUM_MANA_NAME"
					default_format = "#T"
				}

				text_single = {
					name = "maximum_mana"
					text = "[GetPlayer.MakeScope.ScriptValue('ancient_magic_max_mana')|+0]"
				}

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 5
				}
			}

			vbox_gen_breakdown = {
				name = "mana_gen_income"
				layoutpolicy_horizontal = expanding
				block "income" {}
				blockoverride "breakdown_name"
				{
					text = "MANA_INCOME_NAME"
				}
				blockoverride "datamodel"
				{
					datamodel = "[GetGlobalList('mana_gen_income')]"
				}
				blockoverride "not_datamodel_has_items"
				{
					visible = "[Not(DataModelHasItems( GetGlobalList('mana_gen_income') ))]"
				}
				blockoverride "datamodel_has_items"
				{
					visible = "[DataModelHasItems( GetGlobalList('mana_gen_income') )]"
					datacontext = "[GetScriptedGui('mana_gen_income')]"
				}
				blockoverride "breakdown_total"
				{
					text = "[GetPlayer.MakeScope.ScriptValue('ancient_magic_mana_gen_gen_only')|+=0]"
				}
			}

			vbox_gen_breakdown = {
				name = "mana_gen_expenses"
				layoutpolicy_horizontal = expanding
				block "expenses" {}
				blockoverride "breakdown_name"
				{
					text = "MANA_EXPENSES_NAME"
				}
				blockoverride "datamodel"
				{
					datamodel = "[GetGlobalList('mana_gen_expenses')]"
				}
				blockoverride "not_datamodel_has_items"
				{
					visible = "[Not(DataModelHasItems(GetGlobalList('mana_gen_expenses')))]"
				}
				blockoverride "datamodel_has_items"
				{
					visible = "[DataModelHasItems(GetGlobalList('mana_gen_expenses'))]"
					datacontext = "[GetScriptedGui('mana_gen_expenses')]"
				}
				blockoverride "breakdown_total"
				{
					text = "[GetPlayer.MakeScope.ScriptValue('ancient_magic_mana_gen_drain_only')|+=0]"
				}
			}

			hbox = { #Net Gen
				layoutpolicy_horizontal = expanding
				margin_top = 10
				margin_bottom = 2

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "MANA_GENERATION_NAME"
					default_format = "#T"
				}

				text_single = {
					name = "monthly_gen1"
					text = "[GetPlayer.MakeScope.ScriptValue('ancient_magic_mana_gen')|+=0]"
				}

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 5
				}
			}
		}
	}

	type vbox_gen_breakdown = vbox {
		spacing = 5
		alwaystransparent = no

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				block "breakdown_name" {}
				default_format = "#T"

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 5
				}
			}

			vbox = {
				name = "values_grid"
				block "datamodel" {}
				layoutpolicy_horizontal = expanding

				item = {
					hbox = {
						name = "value_breakdown"
						datacontext = "[GetScriptedGui(Concatenate('hud_mana_',Scope.GetFlagName))]"
						visible = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						layoutpolicy_horizontal = expanding
						spacing = 10

						text_single = {
							name = "name"
							layoutpolicy_horizontal = expanding
							text = "[Localize(Concatenate('mana_breakdown_',Scope.GetFlagName))]"
						}

						text_single = {
							name = "value_with_tooltip"
							visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							text = "[GetPlayer.MakeScope.ScriptValue(Concatenate('ancient_magic_mana_',Scope.GetFlagName))|=0L]"
							align = right
							default_format = "#high"

							using = tooltip_se

							tooltipwidget = {
								widget_gen_breakdown_tooltip = {
									blockoverride "datamodel" {
										datamodel = "[GetGlobalList(Scope.GetFlagName)]"
									}
								}
							}
						}

						text_single = {
							name = "value_with_no_tooltip"
							datacontext = "[GetScriptedGui(Concatenate('hud_mana_',Scope.GetFlagName))]"
							visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
							text = "[GetPlayer.MakeScope.ScriptValue(Concatenate('ancient_magic_mana_',Scope.GetFlagName))|=0]"
							align = right
							default_format = "#high"
						}
					}
				}
			}

			text_single = {
				block "not_datamodel_has_items" {}
				layoutpolicy_horizontal = expanding
				block "no_values" {
					text = "VALUE_BREAKDOWN_NO_VALUES"
				}
				default_format = "#weak"
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				hbox = {
					block "datamodel_has_items" {}
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						layoutpolicy_horizontal = expanding

						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						block "breakdown_total" {}
						default_format = "#high"
					}
				}
			}
		}
	}

	type widget_gen_breakdown_tooltip = widget {
		name = "gen_values_grid"
		size = { 50 50 }
		alwaystransparent = no

		background = {
			using = Background_Area_Border_Solid
		}

		vbox = {
			block "datamodel" {}
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3

			item = {
				hbox = {
					name = "value_breakdown"
					datacontext = "[GetScriptedGui('should_show_breakdown_for_flag')]"
					visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flag_name',MakeScopeFlag(Scope.GetFlagName)).End)]"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "[Localize(Concatenate(Scope.GetFlagName,'_name'))]"
						min_width = 180
						max_width = 250
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						margin_right = 10
					}

					text_single = {
						visible = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flag_name',MakeScopeFlag(Scope.GetFlagName)).End)]"
						name = "value_with_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue(Concatenate(Scope.GetFlagName,'_gen_cost'))|+=0L]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"

						using = tooltip_below

						tooltipwidget = {
							widget_gen_breakdown_tooltip_targets = {
								blockoverride "setup_context" {
									datacontext = "[Scope]"
								}
								blockoverride "datamodel" {
									datamodel = "[GetPlayer.MakeScope.GetList(Concatenate(Scope.GetFlagName,'_targets'))]"
								}
							}
						}
					}

					text_single = {
						name = "value_with_no_tooltip"
						visible = "[Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flag_name',MakeScopeFlag(Scope.GetFlagName)).End))]"
						text = "[GetPlayer.MakeScope.ScriptValue(Concatenate(Scope.GetFlagName,'_gen_cost'))|+=0]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}
		}
	}

	type widget_gen_breakdown_tooltip_targets = widget {
		name = "gen_values_grid"
		size = { 50 50 }
		alwaystransparent = no
		block "setup_context" {}

		background = {
			using = Background_Area_Border_Solid
		}

		state = {
			name = _show

			on_start = "[GetVariableSystem.Set('tooltip_spell_cost_name',Concatenate(Scope.GetFlagName,'_gen_cost_individual'))]"
		}

		state = {
			name = _hide

			on_start = "[GetVariableSystem.Clear('tooltip_spell_cost_name')]"
		}

		vbox = {
			block "datamodel" {}
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3

			item = {
				hbox = {
					name = "value_breakdown"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "[Scope.Char.GetName]"
						min_width = 180
						max_width = 250
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						margin_right = 10
					}

					text_single = {
						name = "value_with_no_tooltip"
						text = "[GetPlayer.MakeScope.ScriptValue(GetVariableSystem.Get('tooltip_spell_cost_name'))|+=0]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}
		}
	}
}
